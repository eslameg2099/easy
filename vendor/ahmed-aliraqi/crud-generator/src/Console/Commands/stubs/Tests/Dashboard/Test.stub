<?php

namespace Tests\Feature\Dashboard;

use Tests\TestCase;
use App\Models\{{studlySingular}};
use Illuminate\Foundation\Testing\RefreshDatabase;

class {{studlySingular}}Test extends TestCase
{
    use RefreshDatabase;

    /** @test */
    public function it_can_display_a_list_of_{{lowercasePlural}}()
    {
        $this->actingAsAdmin();

        {{studlySingular}}::factory()->create(['name' => 'Foo']);

        $this->get(route('dashboard.{{lowercasePlural}}.index'))
            ->assertSuccessful()
            ->assertSee('Foo');
    }

    /** @test */
    public function it_can_display_the_{{lowercaseSingular}}_details()
    {
        $this->actingAsAdmin();

        ${{lowercaseSingular}} = {{studlySingular}}::factory()->create(['name' => 'Foo']);

        $this->get(route('dashboard.{{lowercasePlural}}.show', ${{lowercaseSingular}}))
            ->assertSuccessful()
            ->assertSee('Foo');
    }

    /** @test */
    public function it_can_display_{{lowercasePlural}}_create_form()
    {
        $this->actingAsAdmin();

        $this->get(route('dashboard.{{lowercasePlural}}.create'))
            ->assertSuccessful();
    }

    /** @test */
    public function it_can_create_a_new_{{lowercaseSingular}}()
    {
        $this->actingAsAdmin();

        ${{lowercasePlural}}Count = {{studlySingular}}::count();

        $response = $this->post(
            route('dashboard.{{lowercasePlural}}.store'),
            {{studlySingular}}::factory()->raw([
                'name' => 'Foo'
            ])
        );

        $response->assertRedirect();

        ${{lowercaseSingular}} = {{studlySingular}}::all()->last();

        $this->assertEquals({{studlySingular}}::count(), ${{lowercasePlural}}Count + 1);

        $this->assertEquals(${{lowercaseSingular}}->name, 'Foo');
    }

    /** @test */
    public function it_can_display_the_{{lowercasePlural}}_edit_form()
    {
        $this->actingAsAdmin();

        ${{lowercaseSingular}} = {{studlySingular}}::factory()->create();

        $this->get(route('dashboard.{{lowercasePlural}}.edit', ${{lowercaseSingular}}))
            ->assertSuccessful();
    }

    /** @test */
    public function it_can_update_the_{{lowercaseSingular}}()
    {
        $this->actingAsAdmin();

        ${{lowercaseSingular}} = {{studlySingular}}::factory()->create();

        $response = $this->put(
            route('dashboard.{{lowercasePlural}}.update', ${{lowercaseSingular}}),
            {{studlySingular}}::factory()->raw([
                'name' => 'Foo'
            ])
        );

        ${{lowercaseSingular}}->refresh();

        $response->assertRedirect();

        $this->assertEquals(${{lowercaseSingular}}->name, 'Foo');
    }

    /** @test */
    public function it_can_delete_the_{{lowercaseSingular}}()
    {
        $this->actingAsAdmin();

        ${{lowercaseSingular}} = {{studlySingular}}::factory()->create();

        ${{lowercasePlural}}Count = {{studlySingular}}::count();

        $response = $this->delete(route('dashboard.{{lowercasePlural}}.destroy', ${{lowercaseSingular}}));

        $response->assertRedirect();

        $this->assertEquals({{studlySingular}}::count(), ${{lowercasePlural}}Count - 1);
    }

    /** @test */
    public function it_can_display_trashed_{{lowercasePlural}}()
    {
        if (! $this->useSoftDeletes($model = {{studlySingular}}::class)) {
            $this->markTestSkipped("The '$model' doesn't use soft deletes trait.");
        }

        {{studlySingular}}::factory()->create(['deleted_at' => now(), 'name' => 'Ahmed']);

        $this->actingAsAdmin();

        $response = $this->get(route('dashboard.{{lowercasePlural}}.trashed'));

        $response->assertSuccessful();

        $response->assertSee('Ahmed');
    }

    /** @test */
    public function it_can_display_trashed_{{lowercaseSingular}}_details()
    {
        if (! $this->useSoftDeletes($model = {{studlySingular}}::class)) {
            $this->markTestSkipped("The '$model' doesn't use soft deletes trait.");
        }

        ${{lowercaseSingular}} = {{studlySingular}}::factory()->create(['deleted_at' => now(), 'name' => 'Ahmed']);

        $this->actingAsAdmin();

        $response = $this->get(route('dashboard.{{lowercasePlural}}.trashed.show', ${{lowercaseSingular}}));

        $response->assertSuccessful();

        $response->assertSee('Ahmed');
    }

    /** @test */
    public function it_can_restore_deleted_{{lowercaseSingular}}()
    {
        if (! $this->useSoftDeletes($model = {{studlySingular}}::class)) {
            $this->markTestSkipped("The '$model' doesn't use soft deletes trait.");
        }

        ${{lowercaseSingular}} = {{studlySingular}}::factory()->create(['deleted_at' => now()]);

        $this->actingAsAdmin();

        $response = $this->post(route('dashboard.{{lowercasePlural}}.restore', ${{lowercaseSingular}}));

        $response->assertRedirect();

        $this->assertNull(${{lowercaseSingular}}->refresh()->deleted_at);
    }

    /** @test */
    public function it_can_force_delete_{{lowercaseSingular}}()
    {
        if (! $this->useSoftDeletes($model = {{studlySingular}}::class)) {
            $this->markTestSkipped("The '$model' doesn't use soft deletes trait.");
        }

        ${{lowercaseSingular}} = {{studlySingular}}::factory()->create(['deleted_at' => now()]);

        ${{lowercaseSingular}}Count = {{studlySingular}}::withTrashed()->count();

        $this->actingAsAdmin();

        $response = $this->delete(route('dashboard.{{lowercasePlural}}.forceDelete', ${{lowercaseSingular}}));

        $response->assertRedirect();

        $this->assertEquals({{studlySingular}}::withoutTrashed()->count(), ${{lowercaseSingular}}Count - 1);
    }

    /** @test */
    public function it_can_filter_{{lowercasePlural}}_by_name()
    {
        $this->actingAsAdmin();

        {{studlySingular}}::factory()->create([
            'name' => 'Foo',
        ]);

        {{studlySingular}}::factory()->create([
            'name' => 'Bar',
        ]);

        $this->get(route('dashboard.{{lowercasePlural}}.index', [
            'name' => 'Fo',
        ]))
            ->assertSuccessful()
            ->assertSee(trans('{{lowercasePlural}}.filter'))
            ->assertSee('Foo')
            ->assertDontSee('Bar');
    }
}
